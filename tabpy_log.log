2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter port set to "9004" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter server_version set to "1.1.0" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter evaluate_timeout set to "30" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter upload_dir set to "c:\users\lsp52\anaconda3\lib\site-packages\tabpy\tmp\query_objects" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter transfer_protocol set to "http" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:214): Parameter certificate_file is not set
2020-08-28,11:20:55 [DEBUG] (app.py:app:214): Parameter key_file is not set
2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter state_file_path set to "c:\users\lsp52\anaconda3\lib\site-packages\tabpy\tabpy_server" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter static_path set to "c:\users\lsp52\anaconda3\lib\site-packages\tabpy\tabpy_server\static" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:214): Parameter TABPY_PWD_FILE is not set
2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter log_request_context set to "false" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:208): Parameter max_request_size_in_mb set to "100" from default value
2020-08-28,11:20:55 [DEBUG] (app.py:app:423): File c:\users\lsp52\anaconda3\lib\site-packages\tabpy\tabpy_server\state.ini not found, creating from template c:\users\lsp52\anaconda3\lib\site-packages\tabpy\tabpy_server\state.ini.template...
2020-08-28,11:20:55 [INFO] (app.py:app:428): Loading state from state file c:\users\lsp52\anaconda3\lib\site-packages\tabpy\tabpy_server\state.ini
2020-08-28,11:20:55 [DEBUG] (app.py:app:307): Static pages folder set to "c:\users\lsp52\anaconda3\lib\site-packages\tabpy\tabpy_server\static"
2020-08-28,11:20:55 [INFO] (app.py:app:326): Password file is not specified: Authentication is not enabled
2020-08-28,11:20:55 [INFO] (app.py:app:340): Call context logging is disabled
2020-08-28,11:20:55 [INFO] (app.py:app:125): Initializing TabPy...
2020-08-28,11:20:55 [DEBUG] (selector_events.py:selector_events:58): Using selector: SelectSelector
2020-08-28,11:20:55 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2020-08-28,11:20:55 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-08-28,11:20:55 [DEBUG] (state.py:state:616): Returning value '[]'
2020-08-28,11:20:55 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-08-28,11:20:55 [INFO] (app.py:app:129): Done initializing TabPy.
2020-08-28,11:20:55 [INFO] (app.py:app:83): Setting max request size to 104857600 bytes
2020-08-28,11:20:55 [INFO] (callbacks.py:callbacks:64): Initializing models...
2020-08-28,11:20:55 [DEBUG] (state.py:state:596): Loading option 'None' from section [Query Objects Service Versions]...
2020-08-28,11:20:55 [DEBUG] (state.py:state:616): Returning value '[]'
2020-08-28,11:20:55 [DEBUG] (state.py:state:148): Collected endpoints: {}
2020-08-28,11:20:55 [INFO] (app.py:app:107): Web service listening on port 9004
2020-08-28,11:21:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:21:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:21:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:21:33 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:21:33 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:21:33 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:21:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:21:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:21:33 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:21:33 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:21:33 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=self.dfs['ACS County Data']\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:21:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=self.dfs['ACS County Data']
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:21:33 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:21:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:21:33 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:21:33 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:33 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:21:33 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:33 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=self.dfs['ACS County Data']\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:21:33 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=self.dfs['ACS County Data']
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:21:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 996.35ms
2020-08-28,11:21:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 996.34ms
2020-08-28,11:21:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:21:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:21:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:21:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=self.dfs['ACS County Data']\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:21:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=self.dfs['ACS County Data']
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:21:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:21:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:21:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:21:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.98ms
2020-08-28,11:21:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=self.dfs['ACS County Data']\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:21:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=self.dfs['ACS County Data']
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:21:34 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.98ms
2020-08-28,11:21:34 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:21:34 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:21:34 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:21:34 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:21:34 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:21:34 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=self.dfs['ACS County Data']
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:21:34 [INFO] (utils.py:utils:129): Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2020-08-28,11:21:34 [INFO] (utils.py:utils:141): NumExpr defaulting to 8 threads.
2020-08-28,11:21:34 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'self' is not defined"
2020-08-28,11:21:34 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 177.53ms
2020-08-28,11:22:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:27 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:27 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:27 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:27 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.98ms
2020-08-28,11:22:27 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:27 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:27 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:27 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:27 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:27 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:27 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:27 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:27 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:27 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:27 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.98ms
2020-08-28,11:22:29 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:29 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:29 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:29 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:29 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:29 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.98ms
2020-08-28,11:22:29 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:29 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:29 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:29 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:29 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:29 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.02ms
2020-08-28,11:22:29 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:29 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:29 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:29 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:29 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:29 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:22:29 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'self' is not defined"
2020-08-28,11:22:29 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 124.67ms
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:36 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.98ms
2020-08-28,11:22:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:36 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.94ms
2020-08-28,11:22:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:36 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 14.96ms
2020-08-28,11:22:36 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 6.98ms
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:36 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:36 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:36 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:36 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:22:36 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'self' is not defined"
2020-08-28,11:22:36 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 127.66ms
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.97ms
2020-08-28,11:22:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 16.95ms
2020-08-28,11:22:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.97ms
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:38 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.98ms
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:38 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:38 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:38 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:38 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:22:38 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'self' is not defined"
2020-08-28,11:22:38 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 128.73ms
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.97ms
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 14.97ms
2020-08-28,11:22:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.95ms
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:46 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.97ms
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:46 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:46 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:46 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:46 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:22:46 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'self' is not defined"
2020-08-28,11:22:46 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 125.66ms
2020-08-28,11:22:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:50 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.98ms
2020-08-28,11:22:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:50 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.97ms
2020-08-28,11:22:50 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.98ms
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=self.year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:22:50 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.95ms
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:22:50 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:22:50 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:22:50 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:22:50 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=self.year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:22:50 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="NameError : name 'self' is not defined"
2020-08-28,11:22:50 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 124.67ms
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:45 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:45 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.01ms
2020-08-28,11:23:45 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:45 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:23:45 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.94ms
2020-08-28,11:23:45 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.98ms
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:45 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:23:45 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 6.98ms
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:45 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:45 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:45 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:45 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:23:45 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 190.50ms
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 6.97ms
2020-08-28,11:23:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:23:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.96ms
2020-08-28,11:23:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.96ms
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:23:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.98ms
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:23:47 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:23:47 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:23:47 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:23:47 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:23:47 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 131.65ms
2020-08-28,11:24:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:24:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:24:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:24:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:24:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:24:06 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:24:06 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:24:06 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:24:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:24:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 9.00ms
2020-08-28,11:24:06 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:24:06 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:24:06 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:24:06 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:24:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:24:06 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:24:06 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:06 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:24:06 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:06 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:24:06 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:24:06 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.95ms
2020-08-28,11:24:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:24:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:24:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:24:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:24:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:24:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 12.00ms
2020-08-28,11:24:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:24:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:24:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:24:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:24:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:24:11 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.98ms
2020-08-28,11:24:11 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:24:11 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:24:11 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:24:11 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:24:11 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:24:11 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:24:12 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 141.59ms
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:28:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:28:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 8.98ms
2020-08-28,11:28:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:28:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 10.97ms
2020-08-28,11:28:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:28:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    return df\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:28:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.94ms
2020-08-28,11:28:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 6.98ms
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:28:31 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:28:31 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:28:31 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:28:31 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     return df
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:28:31 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 145.61ms
2020-08-28,11:36:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:36:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:36:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:36:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:42 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    return df\n\n# def get_output_schema():\n#     return pd.DataFrame(\n#         {\n#             ''\n#         }\n#     )\n#\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:36:42 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:36:42 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:36:42 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:36:42 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:36:42 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:42 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:36:42 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    return df\n\n# def get_output_schema():\n#     return pd.DataFrame(\n#         {\n#             ''\n#         }\n#     )\n#\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:36:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:36:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.97ms
2020-08-28,11:36:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 7.94ms
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:36:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:36:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:36:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    return df\n\n# def get_output_schema():\n#     return pd.DataFrame(\n#         {\n#             ''\n#         }\n#     )\n#\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:36:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:36:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    return df\n\n# def get_output_schema():\n#     return pd.DataFrame(\n#         {\n#             ''\n#         }\n#     )\n#\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:36:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:36:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.97ms
2020-08-28,11:36:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 11.97ms
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:36:43 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:36:43 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:36:43 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:36:43 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:36:43 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:36:43 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 200.46ms
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:37:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    print(df.columns)\n    return df\n\n# def get_output_schema():\n#     return pd.DataFrame(\n#         {\n#             ''\n#         }\n#     )\n#\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:37:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 5.99ms
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:37:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    print(df.columns)\n    return df\n\n# def get_output_schema():\n#     return pd.DataFrame(\n#         {\n#             ''\n#         }\n#     )\n#\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:37:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    print(df.columns)\n    return df\n\n# def get_output_schema():\n#     return pd.DataFrame(\n#         {\n#             ''\n#         }\n#     )\n#\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:37:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 94.51ms
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:37:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 92.99ms
2020-08-28,11:37:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    print(df.columns)\n    return df\n\n# def get_output_schema():\n#     return pd.DataFrame(\n#         {\n#             ''\n#         }\n#     )\n#\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:37:03 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 33.91ms
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:37:03 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:37:03 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:37:03 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:37:03 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 # def get_output_schema():
 #     return pd.DataFrame(
 #         {
 #             ''
 #         }
 #     )
 #
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:37:04 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 342.72ms
2020-08-28,11:46:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:46:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:46:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:46:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:46:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:46:49 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:46:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:46:49 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:46:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:46:49 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:46:49 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    print(df.columns)\n    return df\n\ndef get_output_schema():\n    return pd.DataFrame(\n        {\n            'FIPS':prep_string(),\n            'State':prep_string(),\n            'County':prep_string(),\n            'MeasureValue':,\n            'Attribute':prep_string(),\n            'VizID':prep_string(),\n            'Stratification':prep_string(),\n            'Measure':prep_string(),\n            'VizLabel':prep_string(),\n            'Data Year':prep_int(),\n            'WeightValue':prep_decimal(),\n            'WeightLabel':prep_string(),\n            'TotalValue':prep_string(),\n            'TotalLabel':prep_string()\n        }\n    )\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:46:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 def get_output_schema():
     return pd.DataFrame(
         {
             'FIPS':prep_string(),
             'State':prep_string(),
             'County':prep_string(),
             'MeasureValue':,
             'Attribute':prep_string(),
             'VizID':prep_string(),
             'Stratification':prep_string(),
             'Measure':prep_string(),
             'VizLabel':prep_string(),
             'Data Year':prep_int(),
             'WeightValue':prep_decimal(),
             'WeightLabel':prep_string(),
             'TotalValue':prep_string(),
             'TotalLabel':prep_string()
         }
     )
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:46:49 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 63)"
2020-08-28,11:46:49 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 47.87ms
2020-08-28,11:46:49 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:46:49 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:46:49 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:46:49 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:46:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:46:49 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:46:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:46:49 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:46:49 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:46:49 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:46:49 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    print(df.columns)\n    return df\n\ndef get_output_schema():\n    return pd.DataFrame(\n        {\n            'FIPS':prep_string(),\n            'State':prep_string(),\n            'County':prep_string(),\n            'MeasureValue':,\n            'Attribute':prep_string(),\n            'VizID':prep_string(),\n            'Stratification':prep_string(),\n            'Measure':prep_string(),\n            'VizLabel':prep_string(),\n            'Data Year':prep_int(),\n            'WeightValue':prep_decimal(),\n            'WeightLabel':prep_string(),\n            'TotalValue':prep_string(),\n            'TotalLabel':prep_string()\n        }\n    )\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:46:49 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 def get_output_schema():
     return pd.DataFrame(
         {
             'FIPS':prep_string(),
             'State':prep_string(),
             'County':prep_string(),
             'MeasureValue':,
             'Attribute':prep_string(),
             'VizID':prep_string(),
             'Stratification':prep_string(),
             'Measure':prep_string(),
             'VizLabel':prep_string(),
             'Data Year':prep_int(),
             'WeightValue':prep_decimal(),
             'WeightLabel':prep_string(),
             'TotalValue':prep_string(),
             'TotalLabel':prep_string()
         }
     )
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:46:49 [ERROR] (base_handler.py:base_handler:121): Responding with status=500, message="Error processing script", info="SyntaxError : invalid syntax (<string>, line 63)"
2020-08-28,11:46:49 [ERROR] (web.py:web:2250): 500 POST /evaluate (127.0.0.1) 49.87ms
2020-08-28,11:47:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:47:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:47:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:47:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    print(df.columns)\n    return df\n\ndef get_output_schema():\n    return pd.DataFrame(\n        {\n            'FIPS':prep_string(),\n            'State':prep_string(),\n            'County':prep_string(),\n            'MeasureValue':prep_decimal(),\n            'Attribute':prep_string(),\n            'VizID':prep_string(),\n            'Stratification':prep_string(),\n            'Measure':prep_string(),\n            'VizLabel':prep_string(),\n            'Data Year':prep_int(),\n            'WeightValue':prep_decimal(),\n            'WeightLabel':prep_string(),\n            'TotalValue':prep_string(),\n            'TotalLabel':prep_string()\n        }\n    )\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:47:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 def get_output_schema():
     return pd.DataFrame(
         {
             'FIPS':prep_string(),
             'State':prep_string(),
             'County':prep_string(),
             'MeasureValue':prep_decimal(),
             'Attribute':prep_string(),
             'VizID':prep_string(),
             'Stratification':prep_string(),
             'Measure':prep_string(),
             'VizLabel':prep_string(),
             'Data Year':prep_int(),
             'WeightValue':prep_decimal(),
             'WeightLabel':prep_string(),
             'TotalValue':prep_string(),
             'TotalLabel':prep_string()
         }
     )
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:47:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 49.87ms
2020-08-28,11:47:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:47:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:47:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:47:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [DEBUG] (base_handler.py:base_handler:121): Processing POST request '{'data': {'_arg1': {'Percentage over 65 in poverty': ['prep_decimal_type'], 'Percent of Population, Ages 75 to 84': ['prep_decimal_type'], 'Percent of Population, Ages 65 to 74': ['prep_decimal_type'], 'Total Population': ['prep_int_type'], 'county': ['prep_int_type'], 'Percent of Population, Ages 85+': ['prep_decimal_type'], 'F1': ['prep_int_type'], 'Median Household Income': ['prep_int_type'], 'Percentage in poverty': ['prep_decimal_type'], 'NAME': ['prep_string_type'], 'Population, Ages 65 to 74': ['prep_int_type'], 'Population, Ages 85+': ['prep_int_type'], 'Population, Ages 75 to 84': ['prep_int_type'], 'state': ['prep_int_type']}}, 'script': "import pandas as pd\ndef get_output_schema():\n\treturn 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'\ndef prep_string():\n\treturn ['prep_string_type']\ndef prep_bool():\n\treturn ['prep_bool_type']\ndef prep_int():\n\treturn ['prep_int_type']\ndef prep_decimal():\n    return ['prep_decimal_type']\ndef prep_date():\n\treturn ['prep_date_type']\ndef prep_datetime():\n\treturn ['prep_datetime_type']\n# sample cleaning with ACS County info for Tableau\ndef encode(df):\n    import datetime\n    df['state'] = df['state'].astype('str')\n    df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']\n    df['county'] = df['county'].astype('str')\n    df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']\n    df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']\n    df['FIPS']=df['state']+df['county']\n    df['FIPS']=df['FIPS'].astype('str')\n    df=df.drop(['state','county'],axis=1)\n\n    # split county and state names\n    newcols= df['NAME'].str.split(', ', expand=True)\n    df['County']= newcols[0].str.replace(' County','')\n    df['State']= newcols[1]\n\n    # aggregate age cats\n    df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \\\n      df['Population, Ages 75 to 84']+df['Population, Ages 85+']\n\n    # calc in poverty\n    df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)\n\n    df=df[['FIPS','State','County','Total Population']]\n    df=df.rename({'Total Population':'MeasureValue'},axis=1)\n    df['Attribute']='County'\n    df['VizID']='2aA'\n    df['Stratification']='N/A'\n    df['Measure']='Total Population'\n    df['VizLabel']='Total Population'\n    df['Data Year']=datetime.datetime.now().year\n    df['WeightValue']=1\n    df['WeightLabel']='No Weight'\n    df['TotalValue']=''\n    df['TotalLabel']=''\n    print(df)\n    print(df.columns)\n    return df\n\ndef get_output_schema():\n    return pd.DataFrame(\n        {\n            'FIPS':prep_string(),\n            'State':prep_string(),\n            'County':prep_string(),\n            'MeasureValue':prep_decimal(),\n            'Attribute':prep_string(),\n            'VizID':prep_string(),\n            'Stratification':prep_string(),\n            'Measure':prep_string(),\n            'VizLabel':prep_string(),\n            'Data Year':prep_int(),\n            'WeightValue':prep_decimal(),\n            'WeightLabel':prep_string(),\n            'TotalValue':prep_string(),\n            'TotalLabel':prep_string()\n        }\n    )\ndef get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output"}'...
2020-08-28,11:47:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'a6e76b4b-02a6-4ccd-b6cf-33c3c164ffb0'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 def get_output_schema():
     return pd.DataFrame(
         {
             'FIPS':prep_string(),
             'State':prep_string(),
             'County':prep_string(),
             'MeasureValue':prep_decimal(),
             'Attribute':prep_string(),
             'VizID':prep_string(),
             'Stratification':prep_string(),
             'Measure':prep_string(),
             'VizLabel':prep_string(),
             'Data Year':prep_int(),
             'WeightValue':prep_decimal(),
             'WeightLabel':prep_string(),
             'TotalValue':prep_string(),
             'TotalLabel':prep_string()
         }
     )
 def get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_e6ec1e38afd546aba36e9f0ade2063e4(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2020-08-28,11:47:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 40.39ms
2020-08-28,11:47:16 [DEBUG] (base_handler.py:base_handler:121): Checking if need to handle authentication
2020-08-28,11:47:16 [DEBUG] (base_handler.py:base_handler:121): Handling authentication
2020-08-28,11:47:16 [INFO] (base_handler.py:base_handler:121): Authentication is not a required feature for API "v1"
2020-08-28,11:47:16 [DEBUG] (state.py:state:492): Collecting Access-Control-Allow-Origin from state file ...
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [DEBUG] (state.py:state:596): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2020-08-28,11:47:16 [DEBUG] (state.py:state:616): Returning value ''
2020-08-28,11:47:16 [INFO] (base_handler.py:base_handler:121): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 # sample cleaning with ACS County info for Tableau
 def encode(df):
     import datetime
     df['state'] = df['state'].astype('str')
     df.loc[df['state'].str.len()==1,'state'] = '0' + df.loc[df['state'].str.len()==1,'state']
     df['county'] = df['county'].astype('str')
     df.loc[df['county'].str.len()==2,'county'] = '0' + df.loc[df['county'].str.len()==2,'county']
     df.loc[df['county'].str.len()==1,'county'] = '00' + df.loc[df['county'].str.len()==1,'county']
     df['FIPS']=df['state']+df['county']
     df['FIPS']=df['FIPS'].astype('str')
     df=df.drop(['state','county'],axis=1)
 
     # split county and state names
     newcols= df['NAME'].str.split(', ', expand=True)
     df['County']= newcols[0].str.replace(' County','')
     df['State']= newcols[1]
 
     # aggregate age cats
     df['Population, Ages 65+']= df['Population, Ages 65 to 74']+ \
       df['Population, Ages 75 to 84']+df['Population, Ages 85+']
 
     # calc in poverty
     df['Population in Poverty, 65+']=round(df['Population, Ages 65+']*df['Percentage over 65 in poverty']/100)
 
     df=df[['FIPS','State','County','Total Population']]
     df=df.rename({'Total Population':'MeasureValue'},axis=1)
     df['Attribute']='County'
     df['VizID']='2aA'
     df['Stratification']='N/A'
     df['Measure']='Total Population'
     df['VizLabel']='Total Population'
     df['Data Year']=datetime.datetime.now().year
     df['WeightValue']=1
     df['WeightLabel']='No Weight'
     df['TotalValue']=''
     df['TotalLabel']=''
     print(df)
     print(df.columns)
     return df
 
 def get_output_schema():
     return pd.DataFrame(
         {
             'FIPS':prep_string(),
             'State':prep_string(),
             'County':prep_string(),
             'MeasureValue':prep_decimal(),
             'Attribute':prep_string(),
             'VizID':prep_string(),
             'Stratification':prep_string(),
             'Measure':prep_string(),
             'VizLabel':prep_string(),
             'Data Year':prep_int(),
             'WeightValue':prep_decimal(),
             'WeightLabel':prep_string(),
             'TotalValue':prep_string(),
             'TotalLabel':prep_string()
         }
     )
 execution_result = encode(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2020-08-28,11:47:16 [INFO] (web.py:web:2250): 200 POST /evaluate (127.0.0.1) 297.65ms
